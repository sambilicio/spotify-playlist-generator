{"ast":null,"code":"const CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n    },\n    body: 'grant_type=client_credentials'\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  return data.access_token;\n}\nexport async function searchTracks(query) {\n  try {\n    const token = await getAccessToken();\n    // Increased limit to 100 to have a larger pool of tracks\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=100`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    // Filter tracks with previews\n    const tracksWithPreviews = data.tracks.items.filter(track => track.preview_url);\n    // Limit to 8 tracks\n    const limitedTracks = tracksWithPreviews.slice(0, 8);\n    return limitedTracks;\n  } catch (error) {\n    console.error('Error in searchTracks:', error);\n    return [];\n  }\n}","map":{"version":3,"names":["CLIENT_ID","process","env","REACT_APP_SPOTIFY_CLIENT_ID","CLIENT_SECRET","REACT_APP_SPOTIFY_CLIENT_SECRET","getAccessToken","response","fetch","method","headers","btoa","body","ok","Error","status","data","json","access_token","searchTracks","query","token","encodeURIComponent","tracksWithPreviews","tracks","items","filter","track","preview_url","limitedTracks","slice","error","console"],"sources":["/Users/samsears/Desktop/spotify-playlist-generator/src/services/spotifyService.js"],"sourcesContent":["const CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n    },\n    body: 'grant_type=client_credentials'\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  const data = await response.json();\n  return data.access_token;\n}\n\nexport async function searchTracks(query) {\n  try {\n    const token = await getAccessToken();\n    // Increased limit to 100 to have a larger pool of tracks\n    const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=100`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    // Filter tracks with previews\n    const tracksWithPreviews = data.tracks.items.filter(track => track.preview_url);\n    // Limit to 8 tracks\n    const limitedTracks = tracksWithPreviews.slice(0, 8);\n    return limitedTracks;\n  } catch (error) {\n    console.error('Error in searchTracks:', error);\n    return [];\n  }\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;AACzD,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,+BAA+B;AAEjE,eAAeC,cAAcA,CAAA,EAAG;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;IACrEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,mCAAmC;MACnD,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACX,SAAS,GAAG,GAAG,GAAGI,aAAa;IAClE,CAAC;IACDQ,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;EAC3D;EAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,YAAY;AAC1B;AAEA,OAAO,eAAeC,YAAYA,CAACC,KAAK,EAAE;EACxC,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMf,cAAc,CAAC,CAAC;IACpC;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCc,kBAAkB,CAACF,KAAK,CAAC,uBAAuB,EAAE;MACpHV,OAAO,EAAE;QACP,eAAe,EAAE,UAAUW,KAAK;MAClC;IACF,CAAC,CAAC;IAEF,IAAI,CAACd,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC;IACA,MAAMM,kBAAkB,GAAGP,IAAI,CAACQ,MAAM,CAACC,KAAK,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAAC;IAC/E;IACA,MAAMC,aAAa,GAAGN,kBAAkB,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACpD,OAAOD,aAAa;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}